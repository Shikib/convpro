{"version":3,"sources":["components/ConversationSearch/index.js","components/ConversationListItem/index.js","components/Toolbar/index.js","components/ToolbarButton/index.js","components/Compose/index.js","components/ConversationList/index.js","components/Message/index.js","components/MessageList/index.js","components/Modal/Modal.js","components/Messenger/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["ConversationSearch","react_default","a","createElement","className","type","placeholder","Component","ConversationListItem","shave","_this$props$data","this","props","data","photo","name","text","src","alt","Toolbar","_this$props","title","leftItems","rightItems","ToolbarButton","icon","concat","Compose","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleKeyPress","event","key","preventDefault","target","value","length","alert","setState","responseRecorded","messageAddHandler","document","getElementById","state","textInputValue","textValue","handleChangeTextInput","bind","assertThisInitialized","handleButtonClick","handleAddMessage","enterHandler","id","rows","onKeyPress","onChange","onClick","Message","isMine","startsSequence","endsSequence","showTimestamp","friendlyTimestamp","moment","timestamp","format","join","message","MessageList","getMessages","messages","authorID","prevState","objectSpread","author","render","ranges","all_responses","sendDataToServer","addMessage","text_entered","console","log","keyword_highlights","i","j","push","ind","substring","start","end","fetch","SERVER_URL","method","body","JSON","stringify","uuid","localStorage","getItem","response","fold","dialogue_utterance_id","keywords","window","location","reload","json_conversation","removeItem","conversation_done","total_score","previous_score","turn","messengerobj","isShowing","dialogue","tuplelist","authors","author_index","dialogue_text","Date","getTime","messagesEnd","scrollIntoView","behavior","_this2","Math","random","toString","setItem","then","json","convertToTuple","_this3","oldmessages","oldauthor","newmessage","messageCount","changePage","previous","current","next","currentMoment","previousMoment","previousDuration","duration","diff","as","nextMoment","nextDuration","components_Message_Message","prnt","_this4","components_Toolbar_Toolbar","style","textAlign","renderMessages","float","clear","ref","el","height","display","renderReplies","components_Compose_Compose","modal","transform","show","opacity","close","children","Messenger","openModalHandler","isFirst","closeModalHandler","handleChange","sendName","nameInput","handleRedirect","res","status","href","e","modelDiv","Modal_Modal","justifyContent","flexDirection","alignItems","components_MessageList_MessageList","App","components_Messenger_Messenger","Boolean","hostname","match","ReactDOM","App_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.72389db5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './ConversationSearch.css';\n\nexport default class ConversationSearch extends Component {\n  render() {\n    return (\n      <div className=\"conversation-search\">\n        <input\n          type=\"search\"\n          className=\"conversation-search-input\"\n          placeholder=\"Search Messages\"\n        />\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport shave from 'shave';\n\nimport './ConversationListItem.css';\n\nexport default class ConversationListItem extends Component {\n  componentDidMount() {\n    shave('.conversation-snippet', 20);\n  }\n\n  render() {\n    const { photo, name, text } = this.props.data;\n\n    return (\n      <div className=\"conversation-list-item\">\n        <img className=\"conversation-photo\" src={photo} alt=\"conversation\" />\n        <div className=\"conversation-info\">\n          <h1 className=\"conversation-title\">{ name }</h1>\n          <p className=\"conversation-snippet\">{ text }</p>\n        </div>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport './Toolbar.css';\n\nexport default class Toolbar extends Component {\n  render() {\n    const { title, leftItems, rightItems } = this.props;\n    return (\n      <div className=\"toolbar\">\n        <div className=\"left-items\">{ leftItems }</div>\n        <h1 className=\"toolbar-title\"> <strong>{title}</strong> </h1>\n        <div className=\"right-items\">{ rightItems }</div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './ToolbarButton.css';\n\nexport default class ToolbarButton extends Component {\n  render() {\n    const { icon } = this.props;\n    return (\n      <i className={`toolbar-button ${icon}`} />\n    );\n  }\n}","import React, { Component } from 'react';\nimport './Compose.css';\n\nexport default class Compose extends Component {\n\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      textValue : '',\n      textInputValue : 'Type a response and press enter',\n      responseRecorded: false\n    }\n\n\n    this.handleChangeTextInput = this.handleChangeTextInput.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.handleButtonClick = this.handleButtonClick.bind(this);\n    this.handleAddMessage = this.handleAddMessage.bind(this);\n  }\n\n  handleChangeTextInput(event) {\n    // console.log(event.target.value.length);\n    this.setState({textValue: event.target.value});\n  }\n\n  handleAddMessage(event){\n    event.preventDefault(); \n    // console.log(this.state.textValue);\n    if(this.state.textValue.length <5){\n        alert('Plese enter longer response');\n        // return;\n      }\n      else{\n        this.setState({responseRecorded: true });\n        this.props.messageAddHandler(this.state.textValue);\n        document.getElementById(\"composearea\").value = \"\";\n        document.getElementById(\"composearea\").placeholder = this.state.textInputValue;\n      }\n  }\n\n  handleButtonClick(event) {\n    this.props.enterHandler(this.state.textValue);\n  }\n\n  handleKeyPress = (event) => {\n    if(event.key === 'Enter'){\n      event.preventDefault();\n      \n      if(event.target.value.length <5){\n        alert('Plese enter longer response');\n        // return;\n      }\n      else{\n        this.setState({responseRecorded: true });\n        this.props.messageAddHandler(event.target.value);\n        // event.preventDefault();\n        // document.getElementById(\"composearea\").disabled = true;\n        document.getElementById(\"composearea\").value = \"\";\n        document.getElementById(\"composearea\").placeholder = this.state.textInputValue;\n      }\n    }\n  }\n\n\n\n\n  render() {\n    return (\n      <div className=\"compose\" id ='composediv'>\n        <textarea rows=\"4\" id =\"composearea\"\n          type=\"text\"\n          className=\"compose-input\"\n          placeholder={this.state.textInputValue}\n          onKeyPress={this.handleKeyPress}\n          onChange={this.handleChangeTextInput}\n        ></textarea>\n      {this.state.responseRecorded &&\n          <button className=\"btninstrc\" onClick={this.handleButtonClick}>Submit Round</button>\n      }\n      \n        {\n\n          this.props.rightItems\n        }\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport ConversationSearch from '../ConversationSearch';\nimport ConversationListItem from '../ConversationListItem';\nimport Toolbar from '../Toolbar';\nimport ToolbarButton from '../ToolbarButton';\nimport axios from 'axios';\n\nimport './ConversationList.css';\n\nexport default class ConversationList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      conversations: []\n    };\n  }\n\n  componentDidMount() {\n    this.getConversations();\n  }\n\n  getConversations = () => {\n    axios.get('https://randomuser.me/api/?results=20').then(response => {\n      this.setState(prevState => {\n        let conversations = response.data.results.map(result => {\n          return {\n            photo: result.picture.large,\n            name: `${result.name.first} ${result.name.last}`,\n            text: 'Hello world! This is a long message that needs to be truncated.'\n          };\n        });\n\n        return { ...prevState, conversations };\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"conversation-list\">\n        <Toolbar\n          title=\"Messenger\"\n          leftItems={[\n            <ToolbarButton key=\"cog\" icon=\"ion-ios-cog\" />\n          ]}\n          rightItems={[\n            <ToolbarButton key=\"add\" icon=\"ion-ios-add-circle-outline\" />\n          ]}\n        />\n        <ConversationSearch />\n        {\n          this.state.conversations.map(conversation =>\n            <ConversationListItem\n              key={conversation.name}\n              data={conversation}\n            />\n          )\n        }\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport moment from 'moment';\nimport './Message.css';\n\nexport default class Message extends Component {\n  render() {\n    const {\n      data,\n      isMine,\n      startsSequence,\n      endsSequence,\n      showTimestamp\n    } = this.props;\n\n    const friendlyTimestamp = moment(data.timestamp).format('LLLL');\n    return (\n      <div className={[\n        'message',\n        `${isMine ? 'mine' : ''}`,\n        `${startsSequence ? 'start' : ''}`,\n        `${endsSequence ? 'end' : ''}`\n      ].join(' ')}>\n        {\n          showTimestamp &&\n            <div className=\"timestamp\">\n              { friendlyTimestamp }\n            </div>\n        }\n\n        <div className=\"bubble-container\">\n          <div className=\"bubble\" title={friendlyTimestamp}>\n            { data.message }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport Compose from '../Compose';\nimport Toolbar from '../Toolbar';\nimport ToolbarButton from '../ToolbarButton';\nimport Message from '../Message';\nimport moment from 'moment';\nimport ReactTooltip from 'react-tooltip'\n\n\nimport './MessageList.css';\n\nconst SERVER_URL = 'https://1714973e.ngrok.io'\n//\"https://a1b64b58.ngrok.io\nexport default class MessageList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: [],\n      render: true,\n      ranges: [],\n      all_responses : []\n    };\n    this.sendDataToServer = this.sendDataToServer.bind(this);\n    this.addMessage = this.addMessage.bind(this);\n  }\n\n\n\n\n  sendDataToServer(text_entered){\n    console.log('got back ' + text_entered);\n\n    let keyword_highlights = [];\n    let ranges = this.state.ranges;\n    for(let i = 0; i < ranges.length; i++) {\n      console.log(ranges[i]);\n      console.log(ranges[i].ranges);\n      for(let j = 0; j < ranges[i].ranges.length; j++) {\n        keyword_highlights.push({ind: ranges[i].id, \n                                 text: ranges[i].text.substring(ranges[i].ranges[j].start,\n                                                                ranges[i].ranges[j].end),\n                                 start: ranges[i].ranges[j].start,\n                                 end: ranges[i].ranges[j].end});\n      }\n    }\n    fetch(SERVER_URL+\"/data\", {\n        method: 'POST',\n        body: JSON.stringify({\n          uuid: localStorage.getItem('uuid'),\n          response: text_entered,\n          all_responses: this.state.all_responses, \n          fold : this.state.fold,\n          dialogue_utterance_id: this.state.dialogue_utterance_id,\n          keywords : this.props.keywords,\n          keyword_highlights: keyword_highlights,\n        }),\n      });\n\n    // hacky way to add delay after submitting\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        render: false\n        };\n      });\n       //to be used for delayed display of next screen\n       window.location.reload();\n    /*\n    setTimeout(function() { //Start the timer\n      this.setState(prevState => {\n      return {\n        ...prevState,\n        render: true\n        };\n      }); //After 1 second, set render to true\n      window.location.reload();\n    }.bind(this), 500);\n    */ \n\n    \n  }\n\n  convertToTuple(json_conversation){\n    // console.log(json_conversation);\n\n    if ('conversation_done' in json_conversation){\n\n        localStorage.removeItem('first_time');\n        // save conversation_done to state\n        this.setState(prevState => {\n          return {\n            ...prevState,\n            conversation_done: true,\n            total_score: json_conversation.total_score, \n            previous_score : json_conversation.previous_score,\n            turn : json_conversation.turn,\n          };\n        });\n\n      this.props.messengerobj.setState(prevState => {\n          return {\n            ...prevState,\n          conversation_done: true,\n          isShowing : false,\n          uuid: localStorage.getItem('uuid'),\n          };\n        });\n\n\n        return [];\n        // reset uuid\n    }\n    const dialogue_utterance_id = json_conversation.dialogue_utterance_id;\n    const dialogue = json_conversation.dialogue;\n    const fold = json_conversation.fold;\n    const tuplelist = [];\n    const authors = ['A', 'B'];\n    const previous_score = json_conversation.previous_score;\n    const total_score = json_conversation.total_score;\n    const turn = json_conversation.turn;\n    console.log(total_score + \" \" + previous_score);\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        fold: fold,\n        dialogue_utterance_id: dialogue_utterance_id,\n        total_score: total_score,\n        previous_score : previous_score,\n        turn : turn,\n      };\n    });\n\n    this.props.messengerobj.setState(prevState => {\n      return {\n        ...prevState,\n        fold: fold,\n        dialogue_utterance_id: dialogue_utterance_id,\n        total_score: total_score,\n        previous_score : previous_score,\n        turn : turn,\n      };\n    });\n    \n    let author_index = 0;\n    for (let i = 0; i< dialogue.length; i++){\n        let dialogue_text = dialogue[i].text;\n        tuplelist[i] = {id: i, author: authors[author_index], message: dialogue_text, timestamp: new Date().getTime()};\n        author_index = 1 - author_index;\n    }\n\n\n    return tuplelist;\n  }\n\n  componentDidUpdate() {\n    this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n  }\n\n  componentDidMount() {\n    this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n\n    let uuid = localStorage.getItem('uuid');\n    if(uuid == null) {\n      uuid = Math.random().toString();\n      localStorage.setItem('uuid', uuid);\n    }\n    fetch(SERVER_URL+\"/data?uuid=\"+uuid)\n      .then(response => response.json())\n      .then(data => this.getMessages(this.convertToTuple(data)));\n//      .then(data => this.getMessages(data.map((row, i) => ({id: i, author: row[0], message: row[1], timestamp: new Date().getTime()}))));\n    \n\n  }\n\n  addMessage(text_entered){\n    // console.log('new response ' + text_entered);\n    let oldmessages = this.state.messages;\n    let oldauthor = this.state.author;\n    // console.log(oldmessages);\n    // console.log(oldauthor);\n    let newmessage = {id: oldmessages.length+1, author: oldauthor, message: text_entered, timestamp: new Date().getTime()};\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        all_responses: this.state.all_responses.concat([newmessage])\n      };\n    });\n  }\n\n  getMessages = (messages) => {\n    let authorID = '';\n    if (messages.length>0){\n        authorID = messages[messages.length-1]['author'] == 'A' ? 'B' : 'A';\n    }\n    else {authorID = 'NO MESSAGE';}\n\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        messages: messages,\n        author: authorID,\n      };\n    });\n    // console.log(this.state);\n  }\n\n  changePage(){\n    window.location.reload()\n  }\n\n  renderReplies() {\n    let i = 0;\n    let messageCount = this.state.all_responses.length;\n    let messages = [];\n\n    if ('conversation_done' in this.state){\n      if (this.state.conversation_done == true){\n        return <div>Task completed. Thank you.</div>\n        console.log(this.state);\n      }\n    }\n\n    if(this.state.render == false) { //If this.state.render == true, which is set to true by the timer.\n        return <div>Response submitted, Click for next conversation.\n                  <button className=\"btninstrc\"   onClick={this.changePage}>Go to next conversation</button>\n              </div> //Add dom elements\n        \n    }\n\n    while (i < messageCount) {\n      let previous = this.state.all_responses[i - 1];\n      let current = this.state.all_responses[i];\n      let next = this.state.all_responses[i + 1];\n      // console.log(this.state.author);\n      let isMine = current.author === this.state.author;\n      let currentMoment = moment(current.timestamp);\n      let prevBySameAuthor = false;\n      let nextBySameAuthor = false;\n      let startsSequence = true;\n      let endsSequence = true;\n      let showTimestamp = false;\n\n      if (previous) {\n        let previousMoment = moment(previous.timestamp);\n        let previousDuration = moment.duration(currentMoment.diff(previousMoment));\n        prevBySameAuthor = previous.author === current.author;\n        \n        if (prevBySameAuthor && previousDuration.as('hours') < 1) {\n          startsSequence = false;\n        }\n\n        if (previousDuration.as('hours') < 1) {\n          showTimestamp = false;\n        }\n      }\n\n      if (next) {\n        let nextMoment = moment(next.timestamp);\n        let nextDuration = moment.duration(nextMoment.diff(currentMoment));\n        nextBySameAuthor = next.author === current.author;\n\n        if (nextBySameAuthor && nextDuration.as('hours') < 1) {\n          endsSequence = false;\n        }\n      }\n\n      messages.push(\n        <Message\n          key={i}\n          id={i}\n          isMine={isMine}\n          startsSequence={startsSequence}\n          endsSequence={endsSequence}\n          showTimestamp={showTimestamp}\n          data={current}\n          prnt={this}\n        />\n      );\n\n      // Proceed to the next message.\n      i += 1;\n    }\n\n    this.messages = messages;\n    return messages;\n  }\n\n  renderMessages() {\n    let i = 0;\n    let messageCount = this.state.messages.length;\n    let messages = [];\n\n    if ('conversation_done' in this.state){\n      if (this.state.conversation_done == true){\n        return <div>Task completed. Thank you.</div>\n        console.log(this.state);\n      }\n    }\n\n    if(this.state.render == false) { //If this.state.render == true, which is set to true by the timer.\n        return <div>Response submitted, Click for next conversation.\n                  <button className=\"btninstrc\"   onClick={this.changePage}>Go to next conversation</button>\n              </div> //Add dom elements\n        \n    }\n\n    while (i < messageCount) {\n      let previous = this.state.messages[i - 1];\n      let current = this.state.messages[i];\n      let next = this.state.messages[i + 1];\n      // console.log(this.state.author);\n      let isMine = current.author === this.state.author;\n      let currentMoment = moment(current.timestamp);\n      let prevBySameAuthor = false;\n      let nextBySameAuthor = false;\n      let startsSequence = true;\n      let endsSequence = true;\n      let showTimestamp = true;\n\n      if (previous) {\n        let previousMoment = moment(previous.timestamp);\n        let previousDuration = moment.duration(currentMoment.diff(previousMoment));\n        prevBySameAuthor = previous.author === current.author;\n        \n        if (prevBySameAuthor && previousDuration.as('hours') < 1) {\n          startsSequence = false;\n        }\n\n        if (previousDuration.as('hours') < 1) {\n          showTimestamp = false;\n        }\n      }\n\n      if (next) {\n        let nextMoment = moment(next.timestamp);\n        let nextDuration = moment.duration(nextMoment.diff(currentMoment));\n        nextBySameAuthor = next.author === current.author;\n\n        if (nextBySameAuthor && nextDuration.as('hours') < 1) {\n          endsSequence = false;\n        }\n      }\n\n      messages.push(\n        <Message\n          key={i}\n          id={i}\n          isMine={isMine}\n          startsSequence={startsSequence}\n          endsSequence={endsSequence}\n          showTimestamp={showTimestamp}\n          data={current}\n          prnt={this}\n        />\n      );\n\n      // Proceed to the next message.\n      i += 1;\n    }\n\n    this.messages = messages;\n    return messages;\n  }\n\n  render() {\n    return(\n      <div className=\"all\">\n        <Toolbar\n          title=\"ConvPro\"\n          rightItems={[\n            (<div key=\"info\"className=\"score-all\">\n        <div className=\"score\" style={{textAlign:'center'}}>{\"TOTAL SCORE: \"+ this.state.total_score}</div>\n        <div className=\"score\">{\"ROUND: \"+ (this.state.turn+1) + \" out of 5\" }</div>\n          </div>),\n          ]}\n        />\n\n        <div className=\"message-list\">\n          <div className=\"left-container\">\n            <div className=\"message-list-container\">{this.renderMessages()}</div>\n            <div style={{ float:\"left\", clear: \"both\" }}\n                 ref={(el) => { this.messagesEnd = el; }}>\n            </div>\n          </div>\n          <div className=\"input-container\" style={{height: 'calc(100% - 60px)'}}>\n            <h1>Guess the response!</h1>\n                          <div style={{display: 'inline', textAlign: 'left'}}>\nNot many people have what it takes to be a <strong>MASTER OF CONVERSATION.</strong> Anybody can simply <em>write a response</em> but to <em>put yourself in someone's shoes and predict their response</em> is a challenge indeed.\n<br/>\n<br/>\nOn the left, you'll see an on-going conversation. Your mission, should you choose to accept, is to <strong>predict what was said next</strong>. You may guess as many times as you'd like.\n<br/>\n<br/>\nWe will score your guesses based on how close you were to the <strong>real response</strong>. Remember, punctuation and grammar matters. Try to match the person you're responding as!\n<br/>\n<br/>\nGood luck! Only the best shall succeed.\n                          </div>\n\n            <div className=\"message-list-container\">{this.renderReplies()}</div>\n            <Compose enterHandler={this.sendDataToServer} messageAddHandler = {this.addMessage}  rightItems={[\n            ]}/>\n\n          </div>\n        </div>\n\n\n      </div>\n    );\n  }\n}\n","import React from 'react';\r\n\r\nimport './Modal.css';\r\n\r\nconst modal = (props) => {\r\n    return (\r\n        <div>\r\n            <div className=\"modal-wrapper\"\r\n                style={{\r\n                    transform: props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\r\n                    opacity: props.show ? '1' : '0'\r\n                }}>\r\n                <div className=\"modal-header\">\r\n                    <h3>INSTRUCTIONS</h3>\r\n                    <span className=\"close-modal-btn\" onClick={props.close}>×</span>\r\n                </div>\r\n                <div className=\"modal-body\">\r\n                    \r\n                        {props.children}\r\n                    \r\n                </div>\r\n                <div className=\"modal-footer\">\r\n                    <button className=\"btn-cancel\" onClick={props.close}>CLOSE</button>\r\n                    {/*<button className=\"btn-continue\">CONTINUE</button>*/}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default modal;","import React, { Component } from 'react';\nimport ConversationList from '../ConversationList';\nimport MessageList from '../MessageList';\n//import CheckboxContainer from '../Checkbox';\nimport './Messenger.css';\nimport Modal from '../Modal/Modal.js';\n\nconst SERVER_URL = 'https://1714973e.ngrok.io'\nexport default class Messenger extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      keywords: [],\n      isShowing: true,\n      isFirst:true,\n    };\n    // console.log(this.props.appstate.state.first);\n\n   \n\n    this.openModalHandler = this.openModalHandler.bind(this);\n    this.closeModalHandler = this.closeModalHandler.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.sendName = this.sendName.bind(this);\n  }\n\n\n\n  componentDidMount() {\n\n   let first_time = localStorage.getItem('first_time');\n   // console.log(first_time);\n    if(first_time == null) {\n      localStorage.setItem('first_time', 'true');\n        this.setState({\n            isFirst: true\n        });\n    }\n    else{\n      this.setState({\n            isFirst: false\n        });\n    }\n\n  }\n\n  changePage(){\n    let uuid = Math.random().toString();\n      console.log(uuid);\n    // change uuid for subsequent tasks\n    localStorage.setItem('uuid', uuid);\n\n\n    window.location.reload()\n  }\n\n  sendName(){\n    let uuid = localStorage.getItem('uuid');\n    fetch(SERVER_URL+\"/score\", {\n        method: 'POST',\n        body: JSON.stringify({\n          uuid: uuid,\n          name: this.state.nameInput,\n        }),\n      }).then(this.handleRedirect) ;\n  }\n\n  handleRedirect(res){\n            if( res.status === 200 ){\n                // redirect here\n                console.log('sent');\n\n                let uuid = localStorage.getItem('uuid');\n                localStorage.setItem('uuid', Math.random().toString());\n\n                window.location.href = 'http://convpro.com/score.html?uuid=' + uuid;\n                console.log(localStorage.getItem('uuid'));\n            }else {\n              // Something went wrong here\n              window.location.reload();\n            }\n          }\n\n   handleChange(e) {\n    this.setState({ nameInput: e.target.value });\n  }\n\n    openModalHandler = () => {\n        this.setState({\n            isShowing: true,\n            isFirst: true\n        });\n    }\n\n    closeModalHandler = () => {\n        this.setState({\n            isShowing: false,\n            isFirst: false\n        });\n    }\n\n\n  render() {\n      let modelDiv;\n      if(this.state.isShowing && this.state.isFirst ){\n        modelDiv =  <div className = \"overlay\">\n                    <div onClick={this.closeModalHandler} className=\"back-drop\"></div> \n                        <Modal\n                          className=\"modal\"\n                          show={this.state.isShowing}\n                          close={this.closeModalHandler}>\n                          <div style={{display: 'inline' }}>\nNot many people have what it takes to be a <strong>MASTER OF CONVERSATION.</strong> Anybody can <em>write a response</em> but to <em>put yourself in someone's shoes and predict their response</em> is a challenge indeed.\n<br/>\n<br/>\nOn the left, you'll see an on-going conversation. Your mission, should you choose to accept, is to <strong>predict what was said next</strong>. You may guess as many times as you'd like. \n<br/>\n<br/>\nWe will score your guesses based on how close you were to the <strong>real response</strong>. Remember, punctuation and grammar matters. Try to match the person you're responding as!\n<br/>\n<br/>\nGood luck! Only the best shall succeed.\n                          </div>\n                            </Modal>\n                    </div>\n      }\n      else if(this.state.isShowing) {\n         modelDiv =  <div className = \"overlay\">\n                    <div onClick={this.closeModalHandler} className=\"back-drop\"></div> \n                        <Modal\n                          className=\"modal\"\n                          show={this.state.isShowing}\n                          close={this.closeModalHandler}>\n                          <div style={{display: 'flex', justifyContent: 'center',   flexDirection: 'column', alignItems: 'center'}}>\n                          <div className=\"scoreinfo\">Score for last round: {this.state.previous_score} </div><br />\n                          <div className=\"scoreinfo\">Total score: {this.state.total_score} </div><br />\n                          <div className=\"scoreinfo\">Round: {this.state.turn} out of 5</div>\n                          </div>\n                           </Modal>\n                           </div>\n      }\n      else if(this.state.conversation_done){\n          modelDiv =  <div className = \"overlay\">\n                    <div onClick={this.closeModalHandler} className=\"back-drop\"></div> \n                        <Modal\n                          className=\"modal\"\n                          show={true}\n                          close={this.closeModalHandler}>\n        <div style={{display: 'flex', justifyContent: 'center',   flexDirection: 'column', alignItems: 'center'}}>\n        All rounds completed: &nbsp;&nbsp;\n        <button className=\"btninstrc\" onClick={this.changePage}>Play again</button>\n        <br />\n        Please enter your name here and press Submit Score to finish\n        <br />\n                <input rows=\"4\" id =\"composearea\"\n                type=\"text\"\n                className=\"compose-name\"\n                placeholder=\"Type your name here\"\n                onChange={this.handleChange}\n              />\n        <br />      \n        <button className=\"btninstrc\" onClick={this.sendName}>Submit Score</button>\n        </div>\n                           </Modal>\n                           </div>\n      } \n\n\n      return (\n      <div className=\"messenger\">\n\n        {modelDiv}     \n\n        {/* <Toolbar\n          title=\"Messenger\"\n          leftItems={[\n            <ToolbarButton key=\"cog\" icon=\"ion-ios-cog\" />\n          ]}\n          rightItems={[\n            <ToolbarButton key=\"add\" icon=\"ion-ios-add-circle-outline\" />\n          ]}\n        /> */}\n\n        {/* <Toolbar\n          title=\"Conversation Title\"\n          rightItems={[\n            <ToolbarButton key=\"info\" icon=\"ion-ios-information-circle-outline\" />,\n            <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\" />,\n            <ToolbarButton key=\"phone\" icon=\"ion-ios-call\" />\n          ]}\n        /> */}\n\n        <div className=\"scrollable content\">\n          <MessageList keywords={this.state.keywords} messengerobj ={this}/>\n        </div>\n\n      </div>\n\n    );\n        \n  }\n}\n","import React, { Component } from 'react';\nimport Messenger from '../Messenger';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Messenger />\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}